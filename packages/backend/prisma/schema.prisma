// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider = "prisma-nestjs-graphql"
  output   = "../src/generated"
  emitSingle = true
  emitCompiledResult = true
  addInputTypeValidation = true
  addClassValidator = true
  addClassTransformer = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model with authentication and profile
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  avatar        String?
  isAnonymous   Boolean   @default(false)
  refreshTokens RefreshToken[]
  verificationTokens VerificationToken[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // User's content
  recipes       Recipe[]
  comments      Comment[]
  votes         Vote[]
  places        Place[]
  savedRecipes  SavedRecipe[]
  savedPlaces   SavedPlace[]

  // Dietary preferences
  allergens     Allergen[]
  dietaryTags   DietaryTag[]
}

// RefreshToken model for handling JWT refresh tokens
model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

// VerificationToken model for email verification
model VerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  email     String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

// Recipe model for gluten-free recipes
model Recipe {
  id            String    @id @default(cuid())
  title         String
  description   String
  ingredients   String[]
  instructions  String[]
  prepTime      Int       // in minutes
  cookTime      Int       // in minutes
  servings      Int
  difficulty    String    // EASY, MEDIUM, HARD
  images        String[]  // URLs to S3/Minio
  isAIGenerated Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  author        User      @relation(fields: [authorId], references: [id])
  authorId      String
  comments      Comment[]
  votes         Vote[]
  tags          Tag[]
  allergens     Allergen[]
  dietaryTags   DietaryTag[]
  savedBy       SavedRecipe[]
}

// Place model for gluten-free friendly locations
model Place {
  id            String    @id @default(cuid())
  name          String
  description   String
  address       String
  latitude      Float
  longitude     Float
  images        String[]  // URLs to S3/Minio
  website       String?
  phone         String?
  glutenFreeScore Float   // 0-100 score
  hasFullGFKitchen Boolean
  isVerified    Boolean   @default(false)
  flagCount     Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  addedBy       User      @relation(fields: [addedById], references: [id])
  addedById     String
  comments      Comment[]
  votes         Vote[]
  tags          Tag[]
  savedBy       SavedPlace[]
}

// Comment model for both recipes and places
model Comment {
  id            String    @id @default(cuid())
  content       String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  author        User      @relation(fields: [authorId], references: [id])
  authorId      String
  recipe        Recipe?   @relation(fields: [recipeId], references: [id])
  recipeId      String?
  place         Place?    @relation(fields: [placeId], references: [id])
  placeId       String?
}

// Vote model for both recipes and places
model Vote {
  id            String    @id @default(cuid())
  value         Int       // 1 for upvote, -1 for downvote
  createdAt     DateTime  @default(now())

  // Relations
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  recipe        Recipe?   @relation(fields: [recipeId], references: [id])
  recipeId      String?
  place         Place?    @relation(fields: [placeId], references: [id])
  placeId       String?

  @@unique([userId, recipeId])
  @@unique([userId, placeId])
}

// Tag model for categorizing recipes and places
model Tag {
  id            String    @id @default(cuid())
  name          String    @unique
  type          String    // CUISINE, MEAL_TYPE, OCCASION, etc.
  recipes       Recipe[]
  places        Place[]
}

// Allergen model for filtering recipes
model Allergen {
  id            String    @id @default(cuid())
  name          String    @unique
  users         User[]    // Users who are allergic
  recipes       Recipe[]  // Recipes containing this allergen
}

// Dietary tag model for filtering recipes
model DietaryTag {
  id            String    @id @default(cuid())
  name          String    @unique  // VEGAN, VEGETARIAN, DAIRY_FREE, etc.
  users         User[]    // Users following this diet
  recipes       Recipe[]  // Recipes matching this diet
}

// SavedRecipe model for user's recipe collection
model SavedRecipe {
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  recipe        Recipe    @relation(fields: [recipeId], references: [id])
  recipeId      String
  savedAt       DateTime  @default(now())

  @@id([userId, recipeId])
}

// SavedPlace model for user's favorite places
model SavedPlace {
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  place         Place     @relation(fields: [placeId], references: [id])
  placeId       String
  savedAt       DateTime  @default(now())

  @@id([userId, placeId])
}
